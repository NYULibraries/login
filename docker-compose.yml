version: '3.7'
x-volumes: &default-volumes
  volumes:
    - ./lib:/app/lib/
    - ./app:/app/app/
    - ./spec:/app/spec/
    - ./features:/app/features/
    - ./screenshots:/screenshots/
    - ./tmp/:/app/tmp/

services:
  dev:
    build:
      context: .
      cache_from:
        - login_test
        - $IMAGES_DOMAIN/login_test
        - $IMAGES_DOMAIN/login_test:$BRANCH_NO_SLASH
      dockerfile: Dockerfile.test
    image: login_test:latest
    ports:
      - "3000:3000"
    env_file:
      - test.env
    command: /tmp/wait-for-it.sh db:5432 -- bundle exec rails server -b 0.0.0.0
    environment:
      RAILS_ENV:
    depends_on:
      - setup_dbs
    # <<: *default-volumes

  test:
    build:
      context: .
      cache_from:
        - login_test
        - $IMAGES_DOMAIN/login_test
        - $IMAGES_DOMAIN/login_test:$BRANCH_NO_SLASH
      dockerfile: Dockerfile.test
      args:
        AQUA_MICROSCANNER_TOKEN:
    image: login_test:latest
    env_file:
      - test.env
    environment:
      CI:
      CODECLIMATE_REPO_TOKEN:
      COVERALLS_REPO_TOKEN:
      RAILS_ENV: test
      SCREENSHOT_FAILURES: "true"
      DOCKER: "true"
    command: /tmp/wait-for-it.sh db:5432 -- bundle exec rake
    depends_on:
      - setup_test_dbs
    # <<: *default-volumes

  setup_test_dbs:
    build:
      context: .
      dockerfile: Dockerfile.test
    image: login_test:latest
    environment:
      RAILS_ENV: test
    env_file:
      - test.env
    command: /tmp/wait-for-it.sh db:5432 -- bundle exec rake db:setup
    depends_on:
      - db

  setup_dbs:
    build:
      context: .
      dockerfile: Dockerfile.test
    image: login_test:latest
    env_file:
      - test.env
    command: /tmp/wait-for-it.sh db:5432 -- bundle exec rake db:setup
    depends_on:
      - db

  db:
    image: postgres:alpine
    expose:
      - "5432"

  unicorn:
    build:
      context: .
      cache_from:
      - login
      - $IMAGES_DOMAIN/login
      - $IMAGES_DOMAIN/login:$BRANCH_NO_SLASH
    image: login:latest
    ports:
      - "5000:5000"
    environment:
      RAILS_ENV:
      USE_PRODUCTION_ASSETS: "true" # Use with RAILS_ENV=development
      UNICORN_PORT: 5000
      UNICORN_WEB_CONCURRENCY: 2
      LOG_LEVEL: "debug"
      DOCKER: "true"
    env_file:
      - test.env
    depends_on:
      - setup_dbs

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - unicorn